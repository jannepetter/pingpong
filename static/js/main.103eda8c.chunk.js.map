{"version":3,"sources":["utils/AI.js","utils/Equipment.js","utils/Functions.js","components/Board.js","components/OptionPanel.js","App.js","serviceWorker.js","index.js"],"names":["calcspotAI","playingfield","width","height","ball","x","y","size","dx","dy","playerPaddle","speed","baseWidth","computerPaddle","calculatedAI","resetAiCalculations","centerPaddle","paddle","Math","abs","AILvl1","weak","handicap","usespeed","min","ballXspeed","ballYspeed","smoothspeed","balldirectionX","ballPaddleRelation","reflectLeftoverFromWall","start","leftover","goingUp","dist","landingSpotY","startx","starty","speedx","speedy","time","totW","getXlength","ylength","numberOfHeightCrossings","floor","reverseStartY","ballStartingSpeedX","ballStartingSpeedY","startingPositions","drawPaddles","ctx","beginPath","fillStyle","fillRect","drawball","arc","PI","fill","clearCanvas","canvas","clearRect","Board","props","rafID","useRef","pauseButtonInfo","run","document","getElementById","useState","playerPoints","setPlayerPoints","computerPoints","setComputerPoints","difficulty","setDifficulty","setUpdate","setStart","setRun","getContext","aiLvl","AILvl2","pausedView","useCallback","points","font","fillText","drawInstructions","score","resetAndPause","endGame","whoScored","delayUpdate","setTimeout","drawEndGame","drawEndText","update","paddleHitsEdges","ballDy","ballHitsEdges","centerBounce","round","random","accBounce","third","xRange","positiveSpeed","ballXplusSpeed","paddlePlusWidth","yRange","ballHitsPaddle","current","requestAnimationFrame","useEffect","cancelAnimationFrame","addEventListener","e","key","touchKeyDownHandle","direction","touchKeyUpHandle","goUpTouchKey","goDownTouchKey","passive","className","onClick","OptionPanel","onChange","target","value","name","type","id","defaultChecked","htmlFor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAGIA,E,8CCuBSC,G,MAAe,CACxBC,MA3BY,KA4BZC,OAAqB,EAAI,EA5Bb,OA+BHC,EAAO,CAChBC,EAAGJ,EAAaC,MAAQ,EACxBI,EAAGL,EAAaE,OAAS,EACzBI,KAAMN,EAAaE,OAAS,GAC5BK,GAAIP,EAAaC,MAAQ,IACzBO,GAAIR,EAAaE,OAAS,KAEjBO,EAAe,CACxBL,EAAGJ,EAAaC,MAAQ,GACxBI,EAAGL,EAAaE,OAAS,IACzBD,MAAOD,EAAaC,MAAQ,GAC5BC,OAAQF,EAAaE,OAAS,IAC9BQ,MAAOC,GACPH,GAAI,GAEKI,EAAiB,CAC1BR,EAAGJ,EAAaC,MAAQD,EAAaC,MAAQ,GAC7CI,EAAGL,EAAaE,OAAS,IACzBD,MAAOD,EAAaC,MAAQ,GAC5BC,OAAQF,EAAaE,OAAS,IAC9BQ,MAAOC,GACPH,GAAI,GDlDJK,GAAe,EAKNC,EAAsB,WAC/BD,GAAe,GACO,GAGpBE,EAAe,SAACC,EAAQN,GACtBO,KAAKC,IAAIF,EAAOX,EAAKW,EAAOd,OAAS,EAAKF,EAAaE,OAAS,GAAK,EACrEc,EAAOR,GAAK,EACLQ,EAAOX,EAAKW,EAAOd,OAAS,EAAKF,EAAaE,OAAS,EAC9Dc,EAAOR,IAAc,EAATE,EACLM,EAAOX,EAAKW,EAAOd,OAAS,EAAKF,EAAaE,OAAS,IAC9Dc,EAAOR,GAAKE,IAiBPS,EAAS,SAACC,GACnB,IAAIC,EAAW,EACXD,IACAC,EAAWT,EAAeF,MAAQ,GAEtC,IAAMA,EAlBU,SAACP,EAAMa,GACvB,IAAMd,EAASe,KAAKC,IAAIf,EAAKE,GAAKW,EAAOX,EAAIW,EAAOd,OAAS,IACvDoB,EAAWL,KAAKM,IAAIN,KAAKC,IAAIf,EAAKK,IAAM,EAAGQ,EAAON,OAClDc,EAAaP,KAAKC,IAAIf,EAAKI,IAC3BkB,EAAaR,KAAKC,IAAIf,EAAKK,IACjC,OAAIgB,EAAa,GAAKC,EAAa,EACxBT,EAAON,MAEdR,EAASc,EAAOd,OAAS,EAClBoB,EAEJN,EAAON,MAOAgB,CAAYvB,EAAMS,GAAkBS,EAC5CM,EAAiBxB,EAAKI,GAAK,EAAI,WAAa,WAC5CqB,EAAqBzB,EAAKE,EAAKO,EAAeP,EAAIO,EAAeV,OAAS,EAAK,OAAS,KAI9F,OAHkBC,EAAKE,EAAKO,EAAeP,EAAIO,EAAeV,OAAS,EAAKU,EAAeF,OACvFP,EAAKE,EAAKO,EAAeP,EAAIO,EAAeV,OAAS,EAAKU,EAAeF,MACpDiB,EAAiB,UAAYA,EAAiBC,GAEnE,IAAK,eACDhB,EAAeJ,GAAKE,EACpB,MACJ,IAAK,aACDE,EAAeJ,IAAc,EAATE,EACpB,MACJ,IAAK,kBACDE,EAAeJ,GAAK,EACpB,MACJ,QACIO,EAAaH,EAAgBF,KAMnCmB,EAA0B,SAACC,EAAOC,EAAUC,GAC9C,GAAIA,EACA,OAAOf,KAAKC,IAAIY,EAASC,GAE7B,IAAKC,EAAS,CACV,IAAMC,EAAOH,EAASC,EACtB,OAAIE,EAAOjC,EAAaE,OACbF,EAAaE,QAAU+B,EAAOjC,EAAaE,QAE/C+B,IAYTC,EAAe,SAACC,EAAQC,EAAQC,EAAQC,GAC1C,IACMC,EAXS,SAACJ,GAChB,IAAMK,EAAOxC,EAAaC,MAC1B,OAAIkC,EAASK,EAAO,EACTA,GAAQA,EAAOL,IAAW1B,EAAaL,EAAIK,EAAaR,OAExDuC,EAAOL,GAAUK,EAAO5B,EAAeR,GAKlCqC,CAAWN,GACJE,EACjBK,EAAUzB,KAAKC,IAAIqB,EAAOD,GAC1BK,EAA0B1B,KAAK2B,MAAMF,EAAW1C,EAAaE,QAC7D6B,EAAYW,EAAW1C,EAAaE,OAC1C,GAAgB,IAAZwC,EACA,OAAOvC,EAAKE,EAEhB,GAAIsC,EAA0B,IAAM,GAAKL,EAAS,EAC9C,OAAOT,EAAwBO,EAAQL,GAAU,GAErD,GAAIY,EAA0B,IAAM,GAAKL,EAAS,EAC9C,OAAOT,EAAwBO,EAAQL,GAAU,GAErD,GAAIY,EAA0B,IAAM,GAAKL,EAAS,EAAG,CACjD,IAAMO,EAAgB7C,EAAaE,OAASkC,EAC5C,OAAOP,EAAwBgB,EAAed,GAAU,GAE5D,GAAIY,EAA0B,IAAM,GAAKL,EAAS,EAAG,CACjD,IAAMO,EAAgB7C,EAAaE,OAASkC,EAC5C,OAAOP,EAAwBgB,EAAed,GAAU,KExG1De,EAAqB9C,EAAaC,MAAQ,IAC1C8C,EAAqB/C,EAAaE,OAAS,IAEpC8C,EAAoB,WAC7B7C,EAAKC,EAAIJ,EAAaC,MAAQ,EAC9BE,EAAKE,EAAIL,EAAaE,OAAS,EAC/BC,EAAKI,GAAKuC,EACV3C,EAAKK,GAAKuC,EACVtC,EAAaJ,EAAIL,EAAaE,OAAS,IACvCU,EAAeP,EAAIL,EAAaE,OAAS,KA2BhC+C,EAAc,SAACC,GACxBA,EAAIC,YACJD,EAAIE,UAAY,QAChBF,EAAIG,SAAS5C,EAAaL,EAAGK,EAAaJ,EAAGI,EAAaR,MAAOQ,EAAaP,QAC9EgD,EAAIG,SAASzC,EAAeR,EAAGQ,EAAeP,EAAGO,EAAeX,MAAOW,EAAeV,SAG7EoD,EAAW,SAACJ,GACrBA,EAAIC,YACJD,EAAIK,IAAIpD,EAAKC,EAAGD,EAAKE,EAAGF,EAAKG,KAAM,EAAa,EAAVW,KAAKuC,IAC3CN,EAAIE,UAAY,MAChBF,EAAIO,QA2BKC,EAAc,SAACR,EAAKS,GAC7BT,EAAIU,UAAU,EAAG,EAAGD,EAAO1D,MAAO0D,EAAOzD,QACzCgD,EAAIE,UAAY,QAChBF,EAAIG,SAAS,EAAG,EAAGM,EAAO1D,MAAO0D,EAAOzD,SC0I7B2D,G,MA/MD,SAACC,GACX,IAAMC,EAAQC,mBACRC,EAAkBH,EAAMI,IAAM,QAAU,WACxCP,EAASQ,SAASC,eAAe,YAHlB,EAImBC,mBAAS,GAJ5B,mBAIdC,EAJc,KAIAC,EAJA,OAKuBF,mBAAS,GALhC,mBAKdG,EALc,KAKEC,EALF,KAMfC,EAAaZ,EAAMY,WACnBC,EAAgBb,EAAMa,cACtBC,EAAYd,EAAMc,UAClBC,EAAWf,EAAMe,SACjBC,EAAShB,EAAMgB,OAGf5B,EAAMS,EAAOoB,WAAW,MAC9BpB,EAAO1D,MAAQD,EAAaC,MAC5B0D,EAAOzD,OAASF,EAAaE,OAC7BgD,EAAIE,UAAY,QAChBF,EAAIG,SAAS,EAAG,EAAGM,EAAO1D,MAAO0D,EAAOzD,QAExC,IAAM8E,EAAQ,SAACN,GACX,OAAQA,GACJ,IAAK,OACD,OAAOvD,GAAO,GAClB,IAAK,SACD,OAAOA,GAAO,GAClB,IAAK,OACD,OH0EM,WAClB,IAAMT,EAAQE,EAAeF,MACvBiB,EAAiBxB,EAAKI,GAAK,EAAI,WAAa,WAC3B,aAAnBoB,IAAkD,IAAjBd,IACjCA,GAAe,GAEI,aAAnBc,IAAkD,IAAjBd,IACjCd,EAAamC,EAAa/B,EAAKC,EAAGD,EAAKE,EAAGF,EAAKI,GAAIJ,EAAKK,IACxDK,GAAe,GAGnB,IAAIe,EAAqB7B,EAAca,EAAeP,EAAIO,EAAeV,OAAS,EAAK,OAAS,KAOhG,OANIH,EAAca,EAAeP,EAAIO,EAAeV,OAAS,EAAKU,EAAeF,OAC7EX,EAAca,EAAeP,EAAIO,EAAeV,OAAS,EAAKU,EAAeF,QAC7EkB,EAAqB,WAEZD,EAAiBC,GAG1B,IAAK,eACDhB,EAAeJ,GAAKE,EACpB,MACJ,IAAK,aACDE,EAAeJ,IAAc,EAATE,EACpB,MACJ,IAAK,kBACDE,EAAeJ,GAAK,EACpB,MACJ,QACIO,EAAaH,EAAgBF,IGvGlBuE,GACX,QACI,OAAO9D,GAAO,KAIpB+D,EAAaC,uBAAY,WAC3BzB,EAAYR,EAAKS,GACjBV,EAAYC,GACZI,EAASJ,GDhCe,SAACA,EAAKgB,EAAKpC,EAAOsD,GAC9ClC,EAAImC,KAAO,aACXnC,EAAIE,UAAY,QACZtB,IAAUoC,EACVhB,EAAIoC,SAAS,SAAUtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KAC/D4B,GAAUoC,EAMXA,GAAOpC,GACdoB,EAAIoC,SAAS,aAActF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,MAN3EgD,EAAIoC,SAAS,4BAA6BtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KAC1FgD,EAAIoC,SAAS,8BAA+BtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KAC5FgD,EAAIoC,SAAS,kCAAmCtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KAChGgD,EAAIoC,SAAS,4CAA6CtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,MAC1GgD,EAAIoC,SAAJ,mBAAyBF,EAAzB,sBAAqDpF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,OCuBrGqF,CAAiBrC,EAAKY,EAAMI,IAAKJ,EAAMhC,MAzBpB,KA0BpB,CAACoB,EAAKS,EAAQG,EAAMI,IAAKJ,EAAMhC,QAK5B0D,EAAQL,uBAAY,SAAChF,GACvB,IAAMsF,EAAgB,WAClBzC,IACAlC,IACAoE,KAEJ,OAAI/E,EAAKC,GAAK,KACVqE,EAAkBD,EAAiB,GACnCiB,IACO,YAEPtF,EAAKC,EAAIJ,EAAaC,MAAQ,KAC9BsE,EAAgBD,EAAe,GAC/BmB,IACO,UAEJ,YACR,CAACjB,EAAgBF,EAAcY,IAG5BQ,EAAUP,uBAAY,SAACQ,GACzB,IAAMC,EAAc,WAChBC,YAAW,WACPjB,GAAU,KACX,OAEDkB,EAAc,WAChBjB,GAAS,GACTC,GAAO,GACPH,EAAc,QACdjB,EAAYR,EAAKS,GACjBV,EAAYC,GACZI,EAASJ,GDxDM,SAACA,EAAKoB,EAAcE,GAC3CtB,EAAImC,KAAO,aACXnC,EAAIE,UAAY,QACZkB,EAAeE,EACftB,EAAIoC,SAAS,uBAAwBtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KAC9EsE,EAAiBF,GACxBpB,EAAIoC,SAAS,uBAAwBtF,EAAaC,MAAQ,IAAKD,EAAaE,OAAS,KCmDjF6F,CAAY7C,EAAKoB,EAAcE,IAEnC,OAAQmB,GACJ,IAAK,WACD,GAAInB,EAAiB,GApEV,EAoE+B,CACtCsB,IACA,MAEJF,IACA,MACJ,IAAK,SACD,GAAItB,EAAe,GA3ER,EA2E6B,CACpCwB,IACA,MAEJF,OAKT,CAAC1C,EAAKS,EAAQW,EAAcE,EAAgBI,EAAWC,EAAUC,EAAQH,IAGtEqB,EAASb,uBAAY,WACvBzB,EAAYR,EAAKS,GACjBV,EAAYC,GACZ8B,EAAMN,GAENjE,EAAaJ,GAAKI,EAAaD,GAC/BI,EAAeP,GAAKO,EAAeJ,GACnC8C,EAASJ,GACT/C,EAAKC,GAAKD,EAAKI,GACfJ,EAAKE,GAAKF,EAAKK,GDvDQ,SAACmD,GACxBlD,EAAaJ,EAAI,IACjBI,EAAaJ,EAAI,GAEjBI,EAAaJ,EAAII,EAAaP,OAASyD,EAAOzD,SAC9CO,EAAaJ,EAAIsD,EAAOzD,OAASO,EAAaP,QAE9CU,EAAeP,EAAI,IACnBO,EAAeP,EAAI,GAEnBO,EAAeP,EAAIO,EAAeV,OAASyD,EAAOzD,SAClDU,EAAeP,EAAIsD,EAAOzD,OAASU,EAAeV,QC6ClD+F,CAAgBtC,GDnEK,SAACA,GAC1B,IAAMuC,EAASjF,KAAKC,IAAIf,EAAKK,IACzBL,EAAKE,EAAIsD,EAAOzD,OAASgG,IACzB/F,EAAKE,EAAIsD,EAAOzD,OAChBC,EAAKK,KAAO,GAEZL,EAAKE,EAAI6F,IACT/F,EAAKE,EAAI,EACTF,EAAKK,KAAO,GC4DZ2F,CAAcxC,GDrCQ,WAC1B,IACMyC,EAAenF,KAAKoF,MAAMpF,KAAKqF,UAAY1F,EAAeV,OAAS,KAInEqG,EAAY,SAACvF,EAAQb,GAEvB,OADaA,EAAKI,GAAK,EAAI,QAAU,QAEjC,IAAK,QACDJ,EAAKC,EAAIY,EAAOZ,EAAID,EAAKG,KACzBH,EAAKI,KARK,KASV,MACJ,IAAK,OACDJ,EAAKC,EAAIY,EAAOZ,EAAIY,EAAOf,MAAQE,EAAKG,KACxCH,EAAKI,KAZK,KAkBlB,IAAMiG,EAAQxF,EAAOd,OAAS,EAC1BC,EAAKE,GAAKW,EAAOX,EAAIF,EAAKG,MAAQH,EAAKE,GAAKW,EAAOX,EAAImG,IACvDrG,EAAKK,KAnBI,GAmBcL,EAAKK,IAnBnB,GAmBoCL,EAAKK,IAtBvC,GAwBXL,EAAKE,GAAKW,EAAOX,EAAImG,GAASrG,EAAKE,GAAKW,EAAOX,EAAY,EAARmG,IACnDJ,EAAe,IAAM,EAAIjG,EAAKK,IAAM4F,EAAejG,EAAKK,IAAM4F,GAE9DjG,EAAKE,GAAKW,EAAOX,EAAY,EAARmG,GAAarG,EAAKE,GAAKW,EAAOX,EAAIF,EAAKG,KAAe,EAARkG,IACnErG,EAAKK,IAzBI,GAyBaL,EAAKK,GAzBlB,GAyBkCL,EAAKK,IA5BrC,IAmCbiG,EAAS,SAACzF,EAAQb,GACpB,IAAMuG,EAAgBvG,EAAKI,GAAK,EAC1BoG,EAAiBxG,EAAKC,EAAID,EAAKI,GAC/BqG,EAAkB5F,EAAOZ,EAAIY,EAAOf,MAC1C,SAAIyG,GAAiBC,GAAkB3F,EAAOZ,GAAKuG,GAAkBC,KAGhEF,GAAiBC,EAAiBxG,EAAKG,MAAQsG,GAAmBD,GAAkB3F,EAAOZ,GAM9FyG,EAAS,SAAC7F,EAAQb,GACpB,OAAIA,EAAKE,GAAKW,EAAOX,EAAIF,EAAKG,MAAQH,EAAKE,GAAKW,EAAOX,EAAIW,EAAOd,OAASC,EAAKG,MAMhFmG,EAAOhG,EAAcN,IACrB0G,EAAOpG,EAAcN,IACrBoG,EAAU9F,EAAcN,GAExBsG,EAAO7F,EAAgBT,IACvB0G,EAAOjG,EAAgBT,IACvBoG,EAAU3F,EAAgBT,GCxB1B2G,GACA,IAAMnB,EAAYH,EAAMrF,GACN,YAAdwF,GACAf,GAAU,GACVc,EAAQC,IAER5B,EAAMgD,QAAUC,sBAAsBhB,KAE3C,CAACrC,EAAQT,EAAKwB,EAAYE,EAAWY,EAAOE,IAE/CuB,qBAAU,WACNC,qBAAqBnD,EAAMgD,SACvBjD,EAAMI,KAAOJ,EAAMhC,OAASgC,EAAMkC,QAClCA,MAEL,CAACxB,EAAgBF,EAAcR,EAAMI,IAAKJ,EAAMhC,MAAOgC,EAAMkC,OAAQA,EAAQlC,EAAMY,aAqBtFP,SAASgD,iBAAiB,WAjBV,SAACC,GACC,YAAVA,EAAEC,MACF5G,EAAaD,IAA2B,EAAtBC,EAAaC,OAErB,cAAV0G,EAAEC,MACF5G,EAAaD,GAAKC,EAAaC,UAavCyD,SAASgD,iBAAiB,SAVZ,SAACC,GACG,YAAVA,EAAEC,MACF5G,EAAaD,GAAK,GAER,cAAV4G,EAAEC,MACF5G,EAAaD,GAAK,MAO1B,IA8BM8G,EAAqB,SAACC,GACxB9G,EAAaD,GAAKC,EAAaC,MAAQ6G,GAErCC,EAAmB,WACrB/G,EAAaD,GAAK,GAGhBiH,EAAetD,SAASC,eAAe,aACvCsD,EAAiBvD,SAASC,eAAe,aAU/C,OATAqD,EAAaN,iBAAiB,cAAc,kBAAMG,GAAoB,KAAI,CAAEK,SAAS,IACrFF,EAAaN,iBAAiB,WAAYK,GAC1CE,EAAeP,iBAAiB,cAAc,kBAAMG,EAAmB,KAAI,CAAEK,SAAS,IACtFD,EAAeP,iBAAiB,WAAYK,GAK5CtC,IAEI,yBAAK0C,UAAU,WACX,0BAAMA,UAAU,YAAhB,UAAmCtD,GADvC,IAC4D,0BAAMsD,UAAU,YAAhB,cAAuCpD,GAC9FV,EAAMhC,MAAQ,4BAAQ8F,UAAU,uBAAuBC,QAnD1C,YACA,IAAd/D,EAAMI,KAGe,IAAdJ,EAAMI,KACbY,GAAO,GAHPA,GAAO,KAiD0Eb,GAA4B,KAC3GH,EAAMhC,MACJ,4BAAQ8F,UAAU,uBAAuBC,QAlCjC,WAChBX,qBAAqBnD,EAAMgD,SAC3B/D,IACAlC,IACAgD,EAAMa,cAAc,QACpBO,IACAL,GAAS,GACTC,GAAO,GACPL,EAAkB,GAClBF,EAAgB,KAyBR,WADY,4BAAQqD,UAAU,uBAAuBC,QA5CnD,YACU,IAAhB/D,EAAMhC,QACNkE,IACAzB,EAAgB,GAChBE,EAAkB,GAClBG,GAAU,GACVE,GAAO,GACPD,GAAS,MAqCO,YCpLbiD,G,MA1BK,SAAChE,GAEjB,OAAIA,EAAMhC,MACE,8BAGR,yBAAK8F,UAAU,wBACX,2CAGI,2BAAOG,SAAU,SAAAX,GAAC,OAAItD,EAAMa,cAAcyC,EAAEY,OAAOC,QAC/CC,KAAK,MAAMC,KAAK,QAAQC,GAAG,SAASC,gBAAc,EAACJ,MAAM,SAC7D,2BAAOK,QAAQ,UAAf,QAEA,2BAAOP,SAAU,SAAAX,GAAC,OAAItD,EAAMa,cAAcyC,EAAEY,OAAOC,QAC/CC,KAAK,MAAMC,KAAK,QAAQC,GAAG,SAASH,MAAM,WAC9C,2BAAOK,QAAQ,UAAf,UAEA,2BAAOP,SAAU,SAAAX,GAAC,OAAItD,EAAMa,cAAcyC,EAAEY,OAAOC,QAC/CC,KAAK,MAAMC,KAAK,QAAQC,GAAG,SAASH,MAAM,SAC9C,2BAAOK,QAAQ,UAAf,gBCFDC,MAjBf,WAAgB,IAAD,EACSlE,oBAAS,GADlB,mBACNH,EADM,KACDY,EADC,OAEaT,oBAAS,GAFtB,mBAENvC,EAFM,KAEC+C,EAFD,OAGuBR,mBAAS,QAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIeN,oBAAS,GAJxB,mBAIN2B,EAJM,KAIEpB,EAJF,KAOb,OACE,yBAAKgD,UAAU,OACb,kBAAC,EAAD,CAAajD,cAAeA,EAAe7C,MAAOA,IAClD,kBAAC,EAAD,CAAOoC,IAAKA,EAAKY,OAAQA,EAAQhD,MAAOA,EAAO+C,SAAUA,EACvDH,WAAYA,EAAYC,cAAeA,EACvCqB,OAAQA,EAAQpB,UAAWA,MCLf4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5E,SAASC,eAAe,SDyHpB,kBAAmB4E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.103eda8c.chunk.js","sourcesContent":["import { ball, computerPaddle, playerPaddle, playingfield } from './Equipment'\r\n\r\nlet calculatedAI = false\r\nlet calcspotAI\r\nlet player1calculatedAI = false\r\nlet calcspotPlayer1AI\r\n\r\nexport const resetAiCalculations = () => {\r\n    calculatedAI = false\r\n    player1calculatedAI = false\r\n}\r\n\r\nconst centerPaddle = (paddle, speed) => {\r\n    if (Math.abs(paddle.y + (paddle.height / 2) - playingfield.height / 2) < 6) {\r\n        paddle.dy = 0\r\n    } else if (paddle.y + (paddle.height / 2) > playingfield.height / 2) {\r\n        paddle.dy = speed * -1\r\n    } else if (paddle.y + (paddle.height / 2) < playingfield.height / 2) {\r\n        paddle.dy = speed\r\n    }\r\n}\r\n\r\nconst smoothspeed = (ball, paddle) => {\r\n    const height = Math.abs(ball.y - (paddle.y + paddle.height / 2))\r\n    const usespeed = Math.min(Math.abs(ball.dy) + 1, paddle.speed)\r\n    const ballXspeed = Math.abs(ball.dx)\r\n    const ballYspeed = Math.abs(ball.dy)\r\n    if (ballXspeed > 8 || ballYspeed > 8) {\r\n        return paddle.speed\r\n    }\r\n    if (height < paddle.height / 2) {\r\n        return usespeed\r\n    }\r\n    return paddle.speed\r\n}\r\nexport const AILvl1 = (weak) => {\r\n    let handicap = 0\r\n    if (weak) {\r\n        handicap = computerPaddle.speed / 3\r\n    }\r\n    const speed = smoothspeed(ball, computerPaddle) - handicap\r\n    const balldirectionX = ball.dx > 0 ? 'incoming' : 'outgoing'\r\n    const ballPaddleRelation = ball.y > (computerPaddle.y + computerPaddle.height / 2) ? 'down' : 'up'\r\n    const closeEnuf = ball.y > (computerPaddle.y + computerPaddle.height / 2) - computerPaddle.speed &&\r\n        ball.y < (computerPaddle.y + computerPaddle.height / 2) + computerPaddle.speed\r\n    const info = closeEnuf ? balldirectionX + 'towards' : balldirectionX + ballPaddleRelation\r\n    switch (info) {\r\n        case 'incomingdown':\r\n            computerPaddle.dy = speed\r\n            break;\r\n        case 'incomingup':\r\n            computerPaddle.dy = speed * -1\r\n            break;\r\n        case 'incomingtowards':\r\n            computerPaddle.dy = 0\r\n            break;\r\n        default:\r\n            centerPaddle(computerPaddle, speed)\r\n            break;\r\n    }\r\n\r\n}\r\n\r\nconst reflectLeftoverFromWall = (start, leftover, goingUp) => {\r\n    if (goingUp) {\r\n        return Math.abs(start - (leftover))\r\n    }\r\n    if (!goingUp) {\r\n        const dist = start + (leftover)\r\n        if (dist > playingfield.height) {\r\n            return playingfield.height - (dist - playingfield.height)\r\n        }\r\n        return dist\r\n    }\r\n}\r\nconst getXlength = (startx) => {\r\n    const totW = playingfield.width\r\n    if (startx > totW / 2) {\r\n        return totW - (totW - startx) - (playerPaddle.x + playerPaddle.width)\r\n    } else {\r\n        return totW - startx - (totW - computerPaddle.x)\r\n    }\r\n}\r\n\r\nconst landingSpotY = (startx, starty, speedx, speedy) => {\r\n    const xlength = getXlength(startx)\r\n    const time = xlength / speedx\r\n    const ylength = Math.abs(time * speedy)\r\n    const numberOfHeightCrossings = Math.floor(ylength / (playingfield.height))\r\n    const leftover = (ylength % (playingfield.height))\r\n    if (ylength === 0) {\r\n        return ball.y\r\n    }\r\n    if (numberOfHeightCrossings % 2 === 0 && speedy < 0) {\r\n        return reflectLeftoverFromWall(starty, leftover, true)\r\n    }\r\n    if (numberOfHeightCrossings % 2 === 0 && speedy > 0) {\r\n        return reflectLeftoverFromWall(starty, leftover, false)\r\n    }\r\n    if (numberOfHeightCrossings % 2 === 1 && speedy < 0) {\r\n        const reverseStartY = playingfield.height - starty\r\n        return reflectLeftoverFromWall(reverseStartY, leftover, false)\r\n    }\r\n    if (numberOfHeightCrossings % 2 === 1 && speedy > 0) {\r\n        const reverseStartY = playingfield.height - starty\r\n        return reflectLeftoverFromWall(reverseStartY, leftover, true)\r\n    }\r\n}\r\n\r\nexport const AILvl2 = () => {\r\n    const speed = computerPaddle.speed\r\n    const balldirectionX = ball.dx > 0 ? 'incoming' : 'outgoing'\r\n    if (balldirectionX === 'outgoing' && calculatedAI === true) {\r\n        calculatedAI = false\r\n    }\r\n    if (balldirectionX === 'incoming' && calculatedAI === false) {\r\n        calcspotAI = landingSpotY(ball.x, ball.y, ball.dx, ball.dy)\r\n        calculatedAI = true\r\n    }\r\n\r\n    let ballPaddleRelation = calcspotAI > (computerPaddle.y + computerPaddle.height / 2) ? 'down' : 'up'\r\n    if (calcspotAI < (computerPaddle.y + computerPaddle.height / 2) + computerPaddle.speed &&\r\n        calcspotAI > (computerPaddle.y + computerPaddle.height / 2) - computerPaddle.speed) {\r\n        ballPaddleRelation = 'towards'\r\n    }\r\n    const info = balldirectionX + ballPaddleRelation\r\n\r\n    switch (info) {\r\n        case 'incomingdown':\r\n            computerPaddle.dy = speed\r\n            break;\r\n        case 'incomingup':\r\n            computerPaddle.dy = speed * -1\r\n            break;\r\n        case 'incomingtowards':\r\n            computerPaddle.dy = 0\r\n            break;\r\n        default:\r\n            centerPaddle(computerPaddle, speed)\r\n            break;\r\n    }\r\n}\r\nexport const Player1AI = () => {\r\n    const speed = playerPaddle.speed\r\n    const balldirectionX = ball.dx > 0 ? 'outgoing' : 'incoming'\r\n    if (balldirectionX === 'outgoing' && player1calculatedAI === true) {\r\n        player1calculatedAI = false\r\n    }\r\n    if (balldirectionX === 'incoming' && player1calculatedAI === false) {\r\n        calcspotPlayer1AI = landingSpotY(ball.x, ball.y, ball.dx, ball.dy)\r\n        player1calculatedAI = true\r\n    }\r\n\r\n    let ballPaddleRelation = calcspotPlayer1AI > (playerPaddle.y + playerPaddle.height / 2) ? 'down' : 'up'\r\n    if (calcspotPlayer1AI < (playerPaddle.y + playerPaddle.height / 2) + 5 &&\r\n        calcspotPlayer1AI > (playerPaddle.y + playerPaddle.height / 2) - 5) {\r\n        ballPaddleRelation = 'towards'\r\n    }\r\n    const info = balldirectionX + ballPaddleRelation\r\n\r\n    switch (info) {\r\n        case 'incomingdown':\r\n            playerPaddle.dy = speed\r\n            break;\r\n        case 'incomingup':\r\n            playerPaddle.dy = speed * -1\r\n            break;\r\n        case 'incomingtowards':\r\n            playerPaddle.dy = 0\r\n            break;\r\n        default:\r\n            centerPaddle(playerPaddle, speed)\r\n            break;\r\n    }\r\n\r\n}","let baseWidth = 1600\r\n\r\nexport const changeBaseWidth = (width) => {\r\n    playingfield.width = width\r\n    playingfield.height = width * (2 / 3)\r\n\r\n    ball.x = playingfield.width / 2\r\n    ball.y = playingfield.height / 2\r\n    ball.size = playingfield.height / 40\r\n    ball.dx = playingfield.width / 100\r\n    ball.dy = playingfield.height / 100\r\n\r\n    playerPaddle.x = playingfield.width / 30\r\n    playerPaddle.y = playingfield.height / 2.5\r\n    playerPaddle.width = playingfield.width / 40\r\n    playerPaddle.height = playingfield.height / 5.5\r\n    playerPaddle.speed = width / 100\r\n\r\n    computerPaddle.x = playingfield.width - playingfield.width / 20\r\n    computerPaddle.y = playingfield.height / 2.5\r\n    computerPaddle.width = playingfield.width / 40\r\n    computerPaddle.height = playingfield.height / 5.5\r\n    computerPaddle.speed = width / 100\r\n\r\n}\r\n\r\nexport const playingfield = {\r\n    width: baseWidth,\r\n    height: baseWidth * (2 / 3)\r\n}\r\n\r\nexport const ball = {\r\n    x: playingfield.width / 2,\r\n    y: playingfield.height / 2,\r\n    size: playingfield.height / 40,\r\n    dx: playingfield.width / 100,\r\n    dy: playingfield.height / 100\r\n}\r\nexport const playerPaddle = {\r\n    x: playingfield.width / 30,\r\n    y: playingfield.height / 2.5,\r\n    width: playingfield.width / 40,\r\n    height: playingfield.height / 5.5,\r\n    speed: baseWidth / 100,\r\n    dy: 0\r\n}\r\nexport const computerPaddle = {\r\n    x: playingfield.width - playingfield.width / 20,\r\n    y: playingfield.height / 2.5,\r\n    width: playingfield.width / 40,\r\n    height: playingfield.height / 5.5,\r\n    speed: baseWidth / 100,\r\n    dy: 0\r\n}","import { ball, playerPaddle, computerPaddle, playingfield } from '../utils/Equipment'\r\nconst ballStartingSpeedX = playingfield.width / 100\r\nconst ballStartingSpeedY = playingfield.height / 100\r\n\r\nexport const startingPositions = () => {\r\n    ball.x = playingfield.width / 2\r\n    ball.y = playingfield.height / 2\r\n    ball.dx = ballStartingSpeedX\r\n    ball.dy = ballStartingSpeedY\r\n    playerPaddle.y = playingfield.height / 2.5\r\n    computerPaddle.y = playingfield.height / 2.5\r\n}\r\nexport const drawInstructions = (ctx, run, start, points) => {\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillStyle = \"white\";\r\n    if (start && !run) {\r\n        ctx.fillText(\"Paused\", playingfield.width / 2.2, playingfield.height / 4.4);\r\n    } else if (!start && !run) {\r\n        ctx.fillText(\"Press start to begin game\", playingfield.width / 2.6, playingfield.height / 4.4);\r\n        ctx.fillText(\"Move paddle up, arrowUp key\", playingfield.width / 2.6, playingfield.height / 3.8);\r\n        ctx.fillText(\"Move paddle down, arrowDown key\", playingfield.width / 2.6, playingfield.height / 3.3);\r\n        ctx.fillText(\"Mobile touchkeys, appear in landscapeview\", playingfield.width / 2.6, playingfield.height / 2.95);\r\n        ctx.fillText(`Who gets ${points} points first wins`, playingfield.width / 2.6, playingfield.height / 2.65);\r\n    } else if (run && start) {\r\n        ctx.fillText(\"Get ready!\", playingfield.width / 2.2, playingfield.height / 4.4);\r\n    }\r\n}\r\nexport const drawEndText = (ctx, playerPoints, computerPoints) => {\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillStyle = \"white\";\r\n    if (playerPoints > computerPoints) {\r\n        ctx.fillText(\"You won! Play again?\", playingfield.width / 2.4, playingfield.height / 4.4);\r\n    } else if (computerPoints > playerPoints) {\r\n        ctx.fillText(\"You lose! Try again?\", playingfield.width / 2.4, playingfield.height / 4.4);\r\n    }\r\n}\r\n\r\nexport const drawPaddles = (ctx) => {\r\n    ctx.beginPath()\r\n    ctx.fillStyle = 'white'\r\n    ctx.fillRect(playerPaddle.x, playerPaddle.y, playerPaddle.width, playerPaddle.height)\r\n    ctx.fillRect(computerPaddle.x, computerPaddle.y, computerPaddle.width, computerPaddle.height)\r\n}\r\n\r\nexport const drawball = (ctx) => {\r\n    ctx.beginPath()\r\n    ctx.arc(ball.x, ball.y, ball.size, 0, Math.PI * 2)\r\n    ctx.fillStyle = 'red'\r\n    ctx.fill()\r\n}\r\nexport const ballHitsEdges = (canvas) => {\r\n    const ballDy = Math.abs(ball.dy)\r\n    if (ball.y > canvas.height - ballDy) {\r\n        ball.y = canvas.height\r\n        ball.dy *= -1\r\n    }\r\n    if (ball.y < ballDy) {\r\n        ball.y = 0\r\n        ball.dy *= -1\r\n    }\r\n}\r\nexport const paddleHitsEdges = (canvas) => {\r\n    if (playerPaddle.y < 0) {\r\n        playerPaddle.y = 0\r\n    }\r\n    if (playerPaddle.y + playerPaddle.height > canvas.height) {\r\n        playerPaddle.y = canvas.height - playerPaddle.height\r\n    }\r\n    if (computerPaddle.y < 0) {\r\n        computerPaddle.y = 0\r\n    }\r\n    if (computerPaddle.y + computerPaddle.height > canvas.height) {\r\n        computerPaddle.y = canvas.height - computerPaddle.height\r\n    }\r\n}\r\nexport const clearCanvas = (ctx, canvas) => {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n    ctx.fillStyle = 'black'\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n}\r\n\r\nexport const ballHitsPaddle = () => {\r\n    const edgeBounce = 2\r\n    const centerBounce = Math.round(Math.random() * (computerPaddle.height / 20))\r\n    const speedIncrease = 1.02\r\n    const maxSpeed = 30\r\n\r\n    const accBounce = (paddle, ball) => {\r\n        const info = ball.dx > 0 ? 'right' : 'left'\r\n        switch (info) {\r\n            case 'right':\r\n                ball.x = paddle.x - ball.size\r\n                ball.dx *= -speedIncrease\r\n                break;\r\n            case 'left':\r\n                ball.x = paddle.x + paddle.width + ball.size\r\n                ball.dx *= -speedIncrease\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const third = paddle.height / 3\r\n        if (ball.y >= paddle.y - ball.size && ball.y <= paddle.y + third) {\r\n            ball.dy <= -maxSpeed ? ball.dy = -maxSpeed : ball.dy -= edgeBounce\r\n        }\r\n        if (ball.y >= paddle.y + third && ball.y <= paddle.y + third * 2) {\r\n            centerBounce % 2 === 0 ? ball.dy += centerBounce : ball.dy -= centerBounce\r\n        }\r\n        if (ball.y >= paddle.y + third * 2 && ball.y <= paddle.y + ball.size + third * 3) {\r\n            ball.dy >= maxSpeed ? ball.dy = maxSpeed : ball.dy += edgeBounce\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const xRange = (paddle, ball) => {\r\n        const positiveSpeed = ball.dx > 0 ? true : false\r\n        const ballXplusSpeed = ball.x + ball.dx\r\n        const paddlePlusWidth = paddle.x + paddle.width\r\n        if (positiveSpeed && ballXplusSpeed >= paddle.x && ballXplusSpeed <= paddlePlusWidth) {\r\n            return true\r\n        }\r\n        if (!positiveSpeed && ballXplusSpeed - ball.size <= paddlePlusWidth && ballXplusSpeed >= paddle.x) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    const yRange = (paddle, ball) => {\r\n        if (ball.y >= paddle.y - ball.size && ball.y <= paddle.y + paddle.height + ball.size) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    if (xRange(playerPaddle, ball) &&\r\n        yRange(playerPaddle, ball)) {\r\n        accBounce(playerPaddle, ball)\r\n    }\r\n    if (xRange(computerPaddle, ball) &&\r\n        yRange(computerPaddle, ball)) {\r\n        accBounce(computerPaddle, ball)\r\n    }\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { ball, playerPaddle, computerPaddle, playingfield } from '../utils/Equipment'\r\nimport { AILvl1, AILvl2, /* Player1AI, */ resetAiCalculations } from '../utils/AI'\r\nimport {\r\n    drawPaddles, drawball, ballHitsEdges, paddleHitsEdges,\r\n    clearCanvas, ballHitsPaddle, startingPositions, drawInstructions, drawEndText\r\n} from '../utils/Functions'\r\nimport '../css/Board.css'\r\n\r\nconst Board = (props) => {\r\n    const rafID = useRef()\r\n    const pauseButtonInfo = props.run ? 'pause' : 'continue'\r\n    const canvas = document.getElementById('kanvaasi')\r\n    const [playerPoints, setPlayerPoints] = useState(0)\r\n    const [computerPoints, setComputerPoints] = useState(0)\r\n    const difficulty = props.difficulty\r\n    const setDifficulty = props.setDifficulty\r\n    const setUpdate = props.setUpdate\r\n    const setStart = props.setStart\r\n    const setRun = props.setRun\r\n    const gamePointLimit = 6\r\n\r\n    const ctx = canvas.getContext('2d')\r\n    canvas.width = playingfield.width\r\n    canvas.height = playingfield.height\r\n    ctx.fillStyle = 'black'\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    const aiLvl = (difficulty) => {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                return AILvl1(true)\r\n            case 'normal':\r\n                return AILvl1(false)\r\n            case 'hard':\r\n                return AILvl2()\r\n            default:\r\n                return AILvl1(true)\r\n        }\r\n    }\r\n\r\n    const pausedView = useCallback(() => {\r\n        clearCanvas(ctx, canvas)\r\n        drawPaddles(ctx)\r\n        drawball(ctx)\r\n        drawInstructions(ctx, props.run, props.start, gamePointLimit)\r\n    }, [ctx, canvas, props.run, props.start])\r\n\r\n\r\n\r\n\r\n    const score = useCallback((ball) => {\r\n        const resetAndPause = () => {\r\n            startingPositions()\r\n            resetAiCalculations()\r\n            pausedView()\r\n        }\r\n        if (ball.x < -200) {\r\n            setComputerPoints(computerPoints + 1)\r\n            resetAndPause()\r\n            return 'computer'\r\n        }\r\n        if (ball.x > playingfield.width + 200) {\r\n            setPlayerPoints(playerPoints + 1)\r\n            resetAndPause()\r\n            return 'player'\r\n        }\r\n        return 'noscore'\r\n    }, [computerPoints, playerPoints, pausedView])\r\n\r\n\r\n    const endGame = useCallback((whoScored) => {\r\n        const delayUpdate = () => {\r\n            setTimeout(() => {\r\n                setUpdate(true)\r\n            }, 1500);\r\n        }\r\n        const drawEndGame = () => {\r\n            setStart(false)\r\n            setRun(false)\r\n            setDifficulty('easy')\r\n            clearCanvas(ctx, canvas)\r\n            drawPaddles(ctx)\r\n            drawball(ctx)\r\n            drawEndText(ctx, playerPoints, computerPoints)\r\n        }\r\n        switch (whoScored) {\r\n            case 'computer':\r\n                if (computerPoints + 1 >= gamePointLimit) {\r\n                    drawEndGame()\r\n                    break;\r\n                }\r\n                delayUpdate()\r\n                break;\r\n            case 'player':\r\n                if (playerPoints + 1 >= gamePointLimit) {\r\n                    drawEndGame()\r\n                    break;\r\n                }\r\n                delayUpdate()\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [ctx, canvas, playerPoints, computerPoints, setUpdate, setStart, setRun, setDifficulty])\r\n\r\n\r\n    const update = useCallback(() => {\r\n        clearCanvas(ctx, canvas)\r\n        drawPaddles(ctx)\r\n        aiLvl(difficulty)\r\n        /* Player1AI() */\r\n        playerPaddle.y += playerPaddle.dy\r\n        computerPaddle.y += computerPaddle.dy\r\n        drawball(ctx)\r\n        ball.x += ball.dx\r\n        ball.y += ball.dy\r\n        paddleHitsEdges(canvas)\r\n        ballHitsEdges(canvas)\r\n        ballHitsPaddle()\r\n        const whoScored = score(ball)\r\n        if (whoScored !== 'noscore') {\r\n            setUpdate(false)\r\n            endGame(whoScored)\r\n        } else {\r\n            rafID.current = requestAnimationFrame(update)\r\n        }\r\n    }, [canvas, ctx, difficulty, setUpdate, score, endGame])\r\n\r\n    useEffect(() => {\r\n        cancelAnimationFrame(rafID.current)\r\n        if (props.run && props.start && props.update) {\r\n            update()\r\n        }\r\n    }, [computerPoints, playerPoints, props.run, props.start, props.update, update, props.difficulty])\r\n\r\n\r\n\r\n    const keyDown = (e) => {\r\n        if (e.key === 'ArrowUp') {\r\n            playerPaddle.dy = playerPaddle.speed * -1\r\n        }\r\n        if (e.key === 'ArrowDown') {\r\n            playerPaddle.dy = playerPaddle.speed\r\n        }\r\n    }\r\n    const keyUp = (e) => {\r\n        if (e.key === 'ArrowUp') {\r\n            playerPaddle.dy = 0\r\n        }\r\n        if (e.key === 'ArrowDown') {\r\n            playerPaddle.dy = 0\r\n        }\r\n    }\r\n\r\n    document.addEventListener('keydown', keyDown)\r\n    document.addEventListener('keyup', keyUp)\r\n\r\n    const pauseContinue = () => {\r\n        if (props.run === false) {\r\n            setRun(true)\r\n            return\r\n        } else if (props.run === true) {\r\n            setRun(false)\r\n        }\r\n    }\r\n    const begin = () => {\r\n        if (props.start === false) {\r\n            update()\r\n            setPlayerPoints(0)\r\n            setComputerPoints(0)\r\n            setUpdate(true)\r\n            setRun(true)\r\n            setStart(true)\r\n        }\r\n    }\r\n\r\n    const restartGame = () => {\r\n        cancelAnimationFrame(rafID.current)\r\n        startingPositions()\r\n        resetAiCalculations()\r\n        props.setDifficulty('easy')\r\n        pausedView()\r\n        setStart(false)\r\n        setRun(false)\r\n        setComputerPoints(0)\r\n        setPlayerPoints(0)\r\n    }\r\n    const touchKeyDownHandle = (direction) => {\r\n        playerPaddle.dy = playerPaddle.speed * direction\r\n    }\r\n    const touchKeyUpHandle = () => {\r\n        playerPaddle.dy = 0\r\n\r\n    }\r\n    const goUpTouchKey = document.getElementById('ylosnappi')\r\n    const goDownTouchKey = document.getElementById('alasnappi')\r\n    goUpTouchKey.addEventListener('touchstart', () => touchKeyDownHandle(-1), { passive: true })\r\n    goUpTouchKey.addEventListener('touchend', touchKeyUpHandle)\r\n    goDownTouchKey.addEventListener('touchstart', () => touchKeyDownHandle(1), { passive: true })\r\n    goDownTouchKey.addEventListener('touchend', touchKeyUpHandle)\r\n\r\n\r\n\r\n\r\n    pausedView()\r\n    return (\r\n        <div className='infobar'>\r\n            <span className='infoitem'>player {playerPoints}</span> <span className='infoitem'>computer   {computerPoints}</span>\r\n            {props.start ? <button className='infoitem basicButton' onClick={pauseContinue}>{pauseButtonInfo}</button> : null}\r\n            {!props.start ? <button className='infoitem basicButton' onClick={begin}>start</button> :\r\n                <button className='infoitem basicButton' onClick={restartGame}>restart</button>}\r\n        </div>)\r\n}\r\n\r\n\r\nexport default Board","import React from 'react';\r\nimport '../css/OptionPanel.css'\r\n\r\n\r\nconst OptionPanel = (props) => {\r\n\r\n    if (props.start) {\r\n        return (<div></div>)\r\n    }\r\n    return (\r\n        <div className='optionpanelcontainer'>\r\n            <div>\r\n                difficulty:\r\n\r\n                <input onChange={e => props.setDifficulty(e.target.value)}\r\n                    name=\"jee\" type=\"radio\" id=\"radio1\" defaultChecked value=\"easy\"></input>\r\n                <label htmlFor=\"radio1\" >easy</label>\r\n\r\n                <input onChange={e => props.setDifficulty(e.target.value)}\r\n                    name=\"jee\" type=\"radio\" id=\"radio2\" value=\"normal\"></input>\r\n                <label htmlFor=\"radio2\" >normal</label>\r\n\r\n                <input onChange={e => props.setDifficulty(e.target.value)}\r\n                    name=\"jee\" type=\"radio\" id=\"radio3\" value=\"hard\"></input>\r\n                <label htmlFor=\"radio3\" >real pro</label>\r\n\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default OptionPanel","import React, { useState } from 'react';\nimport './css/App.css';\nimport Board from './components/Board';\nimport OptionPanel from './components/OptionPanel';\n\nfunction App() {\n  const [run, setRun] = useState(false)\n  const [start, setStart] = useState(false)\n  const [difficulty, setDifficulty] = useState('easy')\n  const [update, setUpdate] = useState(false)\n\n\n  return (\n    <div className=\"App\">\n      <OptionPanel setDifficulty={setDifficulty} start={start}></OptionPanel>\n      <Board run={run} setRun={setRun} start={start} setStart={setStart}\n        difficulty={difficulty} setDifficulty={setDifficulty}\n        update={update} setUpdate={setUpdate}></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}